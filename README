

/*

    start = omp_get_wtime();
    for(i=0; i<tN; i++)
    {
        q[i].dn = 1.0;
        q[i].lf = 2.0;
        q[i].up = 3.0;
        q[i].rh = 4.0;
    }
    stop = omp_get_wtime();

    printf("Loop 01 in \t\t\t%f\n", stop - start);


    start = omp_get_wtime();
    for(i=0; i < N; i++)
        for(j=0; j < N; j++)
        {
            ml[i][j].dn = 1.0;
            ml[i][j].lf = 2.0;
            ml[i][j].up = 3.0;
            ml[i][j].rh = 4.0;
        }
    stop = omp_get_wtime();

    printf("Loop 02 in \t\t\t%f\n", stop - start);

    trocaV = q;
    q = q_old;
    q_old = trocaV;

    trocaM = mq;
    mq = mq_old;
    mq_old = trocaM;

    trocaV = l;
    l = l_old;
    l_old = trocaV;

    trocaM = ml;
    ml = ml_old;
    ml_old = trocaM;

    start = omp_get_wtime();
    for(i=0; i<tN; i++)
    {
        q[i].dn = 2.0;
        q[i].lf = 3.0;
        q[i].up = 4.0;
        q[i].rh = 5.0;
    }
    stop = omp_get_wtime();

    printf("Loop 03 in \t\t\t%f\n", stop - start);

    start = omp_get_wtime();
    for(i=0; i<N; i++)
        for(j=0; j<N; j++)
        {
            ml[i][j].dn = 2.0;
            ml[i][j].lf = 3.0;
            ml[i][j].up = 4.0;
            ml[i][j].rh = 5.0;
        }
    stop = omp_get_wtime();

    printf("Loop 04 in \t\t\t%f\n", stop - start);

    sC = 0.0;

    start = omp_get_wtime();
    for(i=0; i<tN; i++)
    {
        sC += l[i].dn - l_old[i].dn;
        sC += l[i].lf - l_old[i].lf;
        sC += l[i].up - l_old[i].up;
        sC += l[i].rh - l_old[i].rh;
    }
    stop = omp_get_wtime();

    printf("Loop 05 in \t\t\t%f\t\t%f\n", stop - start, sC);

    sC = 0.0;

    start = omp_get_wtime();
    for(i=0; i<N; i++)
        for(j=0; j<N; j++)
        {
            sC += mq[i][j].dn - mq_old[i][j].dn;
            sC += mq[i][j].lf - mq_old[i][j].lf;
            sC += mq[i][j].up - mq_old[i][j].up;
            sC += mq[i][j].rh - mq_old[i][j].rh;
        }
    stop = omp_get_wtime();

    printf("Loop 06 in \t\t\t%f\t\t%f\n", stop - start, sC);

    */

/*







/* Função para a fronteira esquerda L */
void fronteira_l(const int _j, const int _k)
{

	double AuxU, AuxD, AuxR,DU, DD, DR; /* Auxiliares para cada lado das células */

	AuxU = shi[_j][_k]/(1+betau[_j][_k]*shi[_j][_k]);
  	AuxD = shi[_j][_k]/(1+betad[_j][_k]*shi[_j][_k]);
  	AuxR = shi[_j][_k]/(1+betar[_j][_k]*shi[_j][_k]);
  	DU = AuxU*(betau[_j][_k]*qd_old[_j][_k+1]+ld_old[_j][_k+1]);
  	DD = AuxD*(betad[_j][_k]*qu_old[_j][_k-1]+lu_old[_j][_k-1]);
  	DR = AuxR*(betar[_j][_k]*ql_old[_j+1][_k]+ll_old[_j+1][_k]);
  	p[_j][_k] = (f[_j][_k] + DU + DR + DD)/(AuxU + AuxR + AuxD);
  	qu[_j][_k] = AuxU*p[_j][_k] - DU;
  	qd[_j][_k] = AuxD*p[_j][_k] - DD;
  	qr[_j][_k] = AuxR*p[_j][_k] - DR;

}

/* Função para a fronteira dereita R */
void fronteira_r(const int _j, const int _k)
{

	double AuxU,AuxD, AuxL,DU, DD, DL;	/* Auxiliares para cada lado das celulas */

	AuxU = shi[_j][_k]/(1+betau[_j][_k]*shi[_j][_k]);
   AuxD = shi[_j][_k]/(1+betad[_j][_k]*shi[_j][_k]);
   AuxL = shi[_j][_k]/(1+betal[_j][_k]*shi[_j][_k]);
   DU = AuxU*(betau[_j][_k]*qd_old[_j][_k+1]+ld_old[_j][_k+1]);
   DD = AuxD*(betad[_j][_k]*qu_old[_j][_k-1]+lu_old[_j][_k-1]);
   DL = AuxL*(betal[_j][_k]*qr_old[_j-1][_k]+lr_old[_j-1][_k]);
   p[_j][_k] = (f[_j][_k] + DU + DL + DD)/(AuxU + AuxL + AuxD);
   qu[_j][_k] = AuxU*p[_j][_k] - DU;
   qd[_j][_k] = AuxD*p[_j][_k] - DD;
   ql[_j][_k] = AuxL*p[_j][_k] - DL;

}

/* Função para a fronteira superior U */
void fronteira_u(const int _j, const int _k)
{

	double AuxD, AuxR, AuxL, DD, DR, DL;	/* Auxiliares para cada lado das celulas */

	AuxL = shi[_j][_k]/(1+betal[_j][_k]*shi[_j][_k]);
  	AuxR = shi[_j][_k]/(1+betar[_j][_k]*shi[_j][_k]);
  	AuxD = shi[_j][_k]/(1+betad[_j][_k]*shi[_j][_k]);
  	DL = AuxL*(betal[_j][_k]*qr_old[_j-1][_k]+lr_old[_j-1][_k]);
  	DR = AuxR*(betar[_j][_k]*ql_old[_j+1][_k]+ll_old[_j+1][_k]);
  	DD = AuxD*(betad[_j][_k]*qu_old[_j][_k-1]+lu_old[_j][_k-1]);
  	p[_j][_k] = (f[_j][_k] + DD + DL + DR)/(AuxD + AuxL + AuxR);
  	ql[_j][_k] = AuxL*p[_j][_k] - DL;
  	qr[_j][_k] = AuxR*p[_j][_k] - DR;
  	qd[_j][_k] = AuxD*p[_j][_k] - DD;

}

/* Função para a fronteira inferior D */
void fronteira_d(const int _j, const int _k)
{
	double AuxU,AuxR, AuxL,DU,DR, DL;	/* Auxiliares para cada lado das celulas */

  	AuxL = shi[_j][_k]/(1+betal[_j][_k]*shi[_j][_k]);
  	AuxR = shi[_j][_k]/(1+betar[_j][_k]*shi[_j][_k]);
  	AuxU = shi[_j][_k]/(1+betau[_j][_k]*shi[_j][_k]);
  	DL = AuxL*(betal[_j][_k]*qr_old[_j-1][_k]+lr_old[_j-1][_k]);
  	DR = AuxR*(betar[_j][_k]*ql_old[_j+1][_k]+ll_old[_j+1][_k]);
  	DU = AuxU*(betau[_j][_k]*qd_old[_j][_k+1]+ld_old[_j][_k+1]);
  	p[_j][_k] = (f[_j][_k] + DU + DL + DR)/(AuxU + AuxL + AuxR);
  	ql[_j][_k] = AuxL*p[_j][_k] - DL;
  	qr[_j][_k] = AuxR*p[_j][_k] - DR;
  	qu[_j][_k] = AuxU*p[_j][_k] - DU;

}

/* Função para os elementos interiores */
void internos(const int _j, const int _k)
{
	double AuxU, AuxD, AuxR, AuxL,DU, DD, DR, DL;	/* Auxiliares para cada lado das celulas */

  	AuxL = shi[_j][_k]/(1+betal[_j][_k]*shi[_j][_k]);
  	AuxR = shi[_j][_k]/(1+betar[_j][_k]*shi[_j][_k]);
  	AuxU = shi[_j][_k]/(1+betau[_j][_k]*shi[_j][_k]);
  	AuxD = shi[_j][_k]/(1+betad[_j][_k]*shi[_j][_k]);
  	DL = AuxL*(betal[_j][_k]*qr_old[_j-1][_k]+lr_old[_j-1][_k]);
  	DR = AuxR*(betar[_j][_k]*ql_old[_j+1][_k]+ll_old[_j+1][_k]);
  	DU = AuxU*(betau[_j][_k]*qd_old[_j][_k+1]+ld_old[_j][_k+1]);
  	DD = AuxD*(betad[_j][_k]*qu_old[_j][_k-1]+lu_old[_j][_k-1]);

	p[_j][_k] = (f[_j][_k] + DU + DD + DR + DL)/(AuxU + AuxR + AuxD + AuxL);
  	ql[_j][_k] = AuxL*p[_j][_k] - DL;
 	qr[_j][_k] = AuxR*p[_j][_k] - DR;
  	qu[_j][_k] = AuxU*p[_j][_k] - DU;
 	qd[_j][_k] = AuxD*p[_j][_k] - DD;

}
